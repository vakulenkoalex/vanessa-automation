
///////////////////////////////////////////////////
//Служебные функции и процедуры
///////////////////////////////////////////////////

// контекст фреймворка Vanessa-Behavior
Перем Ванесса;
Перем мТЗКэшОбъектов;

// Функция экспортирует список шагов, которые реализованы в данной внешней обработке.
Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт
	Ванесса = КонтекстФреймворкаBDD;
	
	ВсеТесты = Новый Массив;

	//описание параметров
	//Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,Снипет,ИмяПроцедуры,ПредставлениеТеста,Транзакция,Параметр);

	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"СоздаюТестовоеОкружениеИзМакета(Парам01)","СоздаюТестовоеОкружениеИзМакета","Дано создаю тестовое окружение из макета ""Данные""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"УдаляюТестовоеОкружение()","УдаляюТестовоеОкружение","И удаляю тестовое окружение");

	Возврат ВсеТесты;
КонецФункции

// Служебная функция для подключения библиотеки создания fixtures.
Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт
	Возврат ПолучитьМакет(ИмяМакета);
КонецФункции

///////////////////////////////////////////////////
//Работа со сценариями
///////////////////////////////////////////////////

// Процедура выполняется перед началом каждого сценария
Процедура ПередНачаломСценария() Экспорт
	
КонецПроцедуры

// Процедура выполняется перед окончанием каждого сценария
Процедура ПередОкончаниемСценария() Экспорт
	
КонецПроцедуры

///////////////////////////////////////////////////
//Реализация шагов
///////////////////////////////////////////////////

//Дано создаю тестовое окружение из макета "Данные"
//@СоздаюТестовоеОкружениеИзМакета(Парам01)
Процедура СоздаюТестовоеОкружениеИзМакета(ИмяМакета) Экспорт
	
	Перем ТестовоеОкружение;
	
	Попытка
		Макет = Ванесса.ПолучитьМакетОбработки(ИмяМакета);
		Данные = Ванесса.СоздатьДанныеПоТабличномуДокументу(Макет);
	Исключение
		Ошибка =  СокрЛП(ОписаниеОшибки());
		ВызватьИсключение "Шаг выполнен с ошибкой: " + СокрЛП(Ошибка);
	КонецПопытки;
	
	Если Не КонтекстСохраняемый.Свойство("ТестовоеОкружение", ТестовоеОкружение) Тогда
		ТестовоеОкружение = Новый Структура;
	КонецЕсли;
	
	ДополнитьСтруктуру(ТестовоеОкружение, Данные);
	КонтекстСохраняемый.Вставить(КлючДанныхДляСохранения(), ТестовоеОкружение);
	
КонецПроцедуры

//И удаляю тестовое окружение
//@УдаляюТестовоеОкружение()
Процедура УдаляюТестовоеОкружение() Экспорт
	
	Перем ЗначениеДанных;
	
	КлючДанных = КлючДанныхДляСохранения();
	
	Если КонтекстСохраняемый.Свойство(КлючДанных, ЗначениеДанных) Тогда
		Ванесса.ПроверитьНеРавенство(УдалитьСозданныеДанные(ЗначениеДанных), 0, "Удалили тестовое окружение");
		КонтекстСохраняемый.Удалить(КлючДанных);
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////
//Служебные процедуры и функции
///////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс
Функция УдалитьСозданныеДанные(Данные) Экспорт
	// обратный порядок нужен для получения правильного количества удаленных элементов, 
	// т.к Владелец.Удалить удаляет и подчиненные элементы из подчиненных справочников
	массивВОбратномПорядке = Новый Массив;
	Для каждого ключЗначение Из Данные Цикл
		массивВОбратномПорядке.Вставить(0, КлючЗначение.Значение);
	КонецЦикла;
	
	количествоУдаленных = 0;
	Для каждого элем Из массивВОбратномПорядке Цикл
		типЭлемента = ТипЗнч(элем);
		Если Справочники.ТипВсеСсылки().СодержитТип(типЭлемента) 
			Или ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(типЭлемента)
			Или ПланыОбмена.ТипВсеСсылки().СодержитТип(типЭлемента)
			Или Документы.ТипВсеСсылки().СодержитТип(типЭлемента) Тогда
			
			УдаляемыйОбъект = элем.ПолучитьОбъект();
			Если УдаляемыйОбъект <> Неопределено Тогда
				Попытка
					УдаляемыйОбъект.Удалить();
					количествоУдаленных = количествоУдаленных + 1;
				Исключение
					Сообщить(ОписаниеОшибки());
				КонецПопытки;
			КонецЕсли; 
			
		ИначеЕсли типЭлемента = Тип("ПользовательИнформационнойБазы") Тогда
			Попытка
				элем.Удалить();
				количествоУдаленных = количествоУдаленных + 1;
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		ИначеЕсли типЭлемента = Тип("Массив") Тогда
			Для Каждого Запись Из элем Цикл
				
				Если СтрНайти(Строка(Запись), "РегистрСведений") = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ИмяРегистра = СтрЗаменить(Строка(Запись), "РегистрСведенийКлючЗаписи.", "");
				ИмяМетаданного = СтрЗаменить(Строка(Запись), "КлючЗаписи.", ".");
				
				МетаданныеРегистра = Метаданные.НайтиПоПолномуИмени(ИмяМетаданного);
				
				Если МетаданныеРегистра.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору Тогда
					Продолжить;
				КонецЕсли;
				
				Попытка
					МенеджерЗаписи = РегистрыСведений[ИмяРегистра].СоздатьМенеджерЗаписи();
					ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Запись);
					МенеджерЗаписи.Удалить();
					количествоУдаленных = количествоУдаленных + 1;
				Исключение
					Сообщить(ОписаниеОшибки());
				КонецПопытки;
				
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	Возврат количествоУдаленных;
КонецФункции

Функция КлючДанныхДляСохранения() Экспорт
	Возврат "ТестовоеОкружение";
КонецФункции

// Дополняет коллекцию СтруктураПриемник значениями из коллекции СтруктураИсточник.
//
// Параметры:
//   СтруктураПриемник - Структура - Коллекция, в которую будут добавляться новые значения.
//   СтруктураИсточник - Структура - Коллекция, из которой будут считываться пары Ключ и Значение для заполнения.
//   СЗаменой - Булево, Неопределено - Что делать в местах пересечения ключей источника и приемника.
//       - Истина - Заменять значения приемника (самый быстрый способ).
//       - Ложь   - Не заменять значения приемника (пропускать).
//       - Неопределено - Значение по умолчанию. Бросать исключение.
//
Процедура ДополнитьСтруктуру(СтруктураПриемник, СтруктураИсточник, СЗаменой = Неопределено) Экспорт
	
	ИскатьКлюч = (СЗаменой = Ложь Или СЗаменой = Неопределено);
	Для Каждого КлючИЗначение Из СтруктураИсточник Цикл
		Если ИскатьКлюч И СтруктураПриемник.Свойство(КлючИЗначение.Ключ) Тогда
			Если СЗаменой = Ложь Тогда
				Продолжить;
			Иначе
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Пересечение структур источника и приемника по ключу ""%1"".'"),
					КлючИЗначение.Ключ);
			КонецЕсли
		КонецЕсли;
		СтруктураПриемник.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
