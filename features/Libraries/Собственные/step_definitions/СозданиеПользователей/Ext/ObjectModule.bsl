
///////////////////////////////////////////////////
//Служебные функции и процедуры
///////////////////////////////////////////////////

// контекст фреймворка Vanessa-Behavior
Перем Ванесса;

// Функция экспортирует список шагов, которые реализованы в данной внешней обработке.
Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт
	Ванесса = КонтекстФреймворкаBDD;
	
	ВсеТесты = Новый Массив;

	//описание параметров
	//Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,Снипет,ИмяПроцедуры,ПредставлениеТеста,Транзакция,Параметр);

	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯСоздаюПользователяСРолью(ИмяПользователя, ИменаРолей)","ЯСоздаюПользователяСРолью","Дано Я создаю пользователя ""Админ"" с ролью ""ПолныеПрава""");

	Возврат ВсеТесты;
КонецФункции

// Служебная функция для подключения библиотеки создания fixtures.
Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт
	Возврат ПолучитьМакет(ИмяМакета);
КонецФункции

///////////////////////////////////////////////////
//Работа со сценариями
///////////////////////////////////////////////////

// Процедура выполняется перед началом каждого сценария
Процедура ПередНачаломСценария() Экспорт
	
КонецПроцедуры

// Процедура выполняется перед окончанием каждого сценария
Процедура ПередОкончаниемСценария() Экспорт
	
КонецПроцедуры

///////////////////////////////////////////////////
//Реализация шагов
///////////////////////////////////////////////////

//Дано Я создаю пользователя ""Админ"" с ролью ""ПолныеПрава""
//@ЯСоздаюПользователяСРолью(ИмяПользователя,ИменаГруппДоступа)
Процедура ЯСоздаюПользователяСРолью(ИмяПользователя, ИменаРолей) Экспорт
	
	Если НетАдминистраторовВБазе() Тогда
		СоздатьАдминистратораСАвторизациейОС();
	КонецЕсли;
	
	Роли = СтрРазделить(ИменаРолей, ",", Ложь);
	
	НайденныйПользователь = НайтиПользователяПоИмени(ИмяПользователя);
	
	Если НайденныйПользователь = Неопределено Тогда
		СоздатьНовогоПользователя(ИмяПользователя, Роли);
	Иначе
		ИзменитьРолиПользователя(Роли, НайденныйПользователь);
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////
//Служебные процедуры и функции
///////////////////////////////////////////////////

Функция НетАдминистраторовВБазе()
	
	Для Каждого Пользователь Из ПользователиИнформационнойБазы.ПолучитьПользователей() Цикл
		
		Для Каждого Роль Из Пользователь.Роли Цикл
			
			Если Роль = Метаданные.Роли.ПолныеПрава Тогда
				Возврат Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Процедура СоздатьАдминистратораСАвторизациейОС()
	
	Wcript=Новый COMОбъект("wscript.network");
	ИмяПользователяОС = Wcript.Username;
	
	НовыйАдминистратор = ПользователиИнформационнойБазы.СоздатьПользователя();
	НовыйАдминистратор.АутентификацияСтандартная = Истина;
	НовыйАдминистратор.АутентификацияОС = Истина;
	НовыйАдминистратор.Имя = "Админ";
	НовыйАдминистратор.ПолноеИмя = НовыйАдминистратор.Имя;
	НовыйАдминистратор.ПользовательОС = "\\" + ИмяКомпьютера() + "\" + ИмяПользователяОС;
	НовыйАдминистратор.Роли.Добавить(Метаданные.Роли.ПолныеПрава);
	
	НовыйАдминистратор.Записать();
	
КонецПроцедуры

Процедура СоздатьНовогоПользователя(ИмяПользователя, Роли)
	
	НовыйПользователь = ПользователиИнформационнойБазы.СоздатьПользователя();
	НовыйПользователь.АутентификацияСтандартная = Истина;
	НовыйПользователь.Имя = ИмяПользователя;
	НовыйПользователь.ПолноеИмя = НовыйПользователь.Имя;
	
	Для Каждого Роль Из Роли Цикл
		НовыйПользователь.Роли.Добавить(Метаданные.Роли[Роль]);
	КонецЦикла;
	
	НовыйПользователь.Записать();
	
КонецПроцедуры

Функция НайтиПользователяПоИмени(ИмяПользователя)
	
	Для Каждого Пользователь Из ПользователиИнформационнойБазы.ПолучитьПользователей() Цикл
		
		Если Пользователь.Имя = ИмяПользователя Тогда
			Возврат Пользователь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;

КонецФункции

Процедура ИзменитьРолиПользователя(Роли, НайденныйПользователь)
	
	НайденныйПользователь.Роли.Очистить();
	
	Для Каждого Роль Из Роли Цикл
		НайденныйПользователь.Роли.Добавить(Метаданные.Роли[Роль]);
	КонецЦикла;
	
	НайденныйПользователь.Записать();
	
КонецПроцедуры
