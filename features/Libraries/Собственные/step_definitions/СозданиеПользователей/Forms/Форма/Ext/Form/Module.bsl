//начало текста модуля

///////////////////////////////////////////////////
//Служебные функции и процедуры
///////////////////////////////////////////////////

&НаКлиенте
// контекст фреймворка Vanessa-Behavior
Перем Ванесса;
 
&НаКлиенте
// Структура, в которой хранится состояние сценария между выполнением шагов. Очищается перед выполнением каждого сценария.
Перем Контекст Экспорт;
 
&НаКлиенте
// Структура, в которой можно хранить служебные данные между запусками сценариев. Существует, пока открыта форма Vanessa-Behavior.
Перем КонтекстСохраняемый Экспорт;

&НаКлиенте
// Функция экспортирует список шагов, которые реализованы в данной внешней обработке.
Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт
	Ванесса = КонтекстФреймворкаBDD;
	
	ВсеТесты = Новый Массив;

	//описание параметров
	//Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,Снипет,ИмяПроцедуры,ПредставлениеТеста,Транзакция,Параметр);

	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯСоздаюПользователяВГруппеДоступа(ИмяПользователя, ИменаГруппДоступа)","ЯСоздаюПользователяВГруппеДоступа","Дано Я создаю пользователя ""Админ"" в группе доступа ""Администраторы""");

	Возврат ВсеТесты;
КонецФункции
	
&НаСервере
// Служебная функция.
Функция ПолучитьМакетСервер(ИмяМакета)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	Возврат ОбъектСервер.ПолучитьМакет(ИмяМакета);
КонецФункции
	
&НаКлиенте
// Служебная функция для подключения библиотеки создания fixtures.
Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт
	Возврат ПолучитьМакетСервер(ИмяМакета);
КонецФункции



///////////////////////////////////////////////////
//Работа со сценариями
///////////////////////////////////////////////////

&НаКлиенте
// Процедура выполняется перед началом каждого сценария
Процедура ПередНачаломСценария() Экспорт
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняется перед окончанием каждого сценария
Процедура ПередОкончаниемСценария() Экспорт
	
КонецПроцедуры



///////////////////////////////////////////////////
//Реализация шагов
///////////////////////////////////////////////////

&НаКлиенте
//Дано Я создаю пользователя ""Админ"" в группе доступа ""Администраторы""
//@ЯСоздаюПользователяВГруппеДоступа(ИмяПользователя,ИменаГруппДоступа)
Процедура ЯСоздаюПользователяВГруппеДоступа(ИмяПользователя, ИменаГруппДоступа) Экспорт
	
	Если НетАдминистраторовВБазе() Тогда
		СоздатьАдминистратораСАвторизациейОС();
	КонецЕсли;
	
	НайденныеГруппы = НайтиГруппыПоИмени(ИменаГруппДоступа);
	НайденныйПользователь = НайтиПользователяПоИмени(ИмяПользователя);
	
	Если НайденныйПользователь = Неопределено Тогда
		СоздатьНовогоПользователя(ИмяПользователя, НайденныеГруппы);
	Иначе
		ИзменитьГруппыПользователя(НайденныеГруппы, НайденныйПользователь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СоздатьАдминистратораСАвторизациейОС()
	
	Wcript=Новый COMОбъект("wscript.network");
	ИмяПользователяОС = Wcript.Username;
	
	НовыйАдминистратор = Справочники.Пользователи.СоздатьЭлемент();
	НовыйАдминистратор.Наименование = "Админ";
	
	ОписаниеПользователяИБ = Пользователи.НовоеОписаниеПользователяИБ();
	ОписаниеПользователяИБ.Вставить("АутентификацияСтандартная", Истина);
	ОписаниеПользователяИБ.Вставить("АутентификацияОС", Истина);
	ОписаниеПользователяИБ.Вставить("ВходВПрограммуРазрешен", Истина);
	ОписаниеПользователяИБ.Вставить("Действие", "Записать");
	ОписаниеПользователяИБ.Вставить("Имя", НовыйАдминистратор.Наименование);
	ОписаниеПользователяИБ.Вставить("ПолноеИмя", НовыйАдминистратор.Наименование);
	ОписаниеПользователяИБ.Вставить("ПользовательОС", "\\" + ИмяКомпьютера() + "\" + ИмяПользователяОС);
	
	МассивРолей = Новый Массив;
	МассивРолей.Добавить("ПолныеПрава");
	МассивРолей.Добавить("АдминистраторСистемы");
	ОписаниеПользователяИБ.Вставить("Роли", МассивРолей);
	
	НовыйАдминистратор.ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", ОписаниеПользователяИБ);
	НовыйАдминистратор.ДополнительныеСвойства.Вставить("СозданиеАдминистратора", "1");
	
	НовыйАдминистратор.Записать();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СоздатьНовогоПользователя(Знач ИмяПользователя, Знач ГруппыДоступа)
	
	НовыйПользователь = Справочники.Пользователи.СоздатьЭлемент();
	НовыйПользователь.Наименование = ИмяПользователя;
	
	ОписаниеПользователяИБ = Пользователи.НовоеОписаниеПользователяИБ();
	ОписаниеПользователяИБ.Вставить("АутентификацияСтандартная", Истина);
	ОписаниеПользователяИБ.Вставить("ВходВПрограммуРазрешен", Истина);
	ОписаниеПользователяИБ.Вставить("Действие", "Записать");
	ОписаниеПользователяИБ.Вставить("Имя", НовыйПользователь.Наименование);
	ОписаниеПользователяИБ.Вставить("ПолноеИмя", НовыйПользователь.Наименование);
	
	НовыйПользователь.ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", ОписаниеПользователяИБ);
	НовыйПользователь.Записать();
	
	ДобавитьПользователяВГруппу(ГруппыДоступа, НовыйПользователь.Ссылка);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИзменитьГруппыПользователя(Знач ГруппыДоступа, Знач Пользователь)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ГруппыДоступаПользователи.Ссылка
		|ИЗ
		|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
		|ГДЕ
		|	ГруппыДоступаПользователи.Пользователь = &Пользователь";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ГруппыБезПользователя = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ГруппыДоступа);
	
	Пока Выборка.Следующий() Цикл
		
		ИндексЭлемента = ГруппыБезПользователя.Найти(Выборка.Ссылка);
		
		Если ИндексЭлемента <> Неопределено Тогда
			ГруппыБезПользователя.Удалить(ИндексЭлемента);
		Иначе
			ГруппаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ГруппаОбъект.Пользователи.Удалить(ГруппаОбъект.Пользователи.Найти(Пользователь, "Пользователь"));
			ГруппаОбъект.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
	ДобавитьПользователяВГруппу(ГруппыБезПользователя, Пользователь);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьПользователяВГруппу(Знач ГруппыДоступа, Знач Пользователь)
	
	Для Каждого ГруппаДоступа Из ГруппыДоступа Цикл
		
		ГруппаОбъект = ГруппаДоступа.ПолучитьОбъект();
		НоваяСтрока = ГруппаОбъект.Пользователи.Добавить();
		НоваяСтрока.Пользователь = Пользователь;
		ГруппаОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиГруппыПоИмени(Знач ИменаГруппДоступа)
	
	МассивИмен = СтрРазделить(ИменаГруппДоступа, ",", Ложь);
	МассивГрупп = Новый Массив;
	
	Для Каждого ИмяГруппыДоступа Из МассивИмен Цикл
		
		НайденнаяГруппа = Справочники.ГруппыДоступа.НайтиПоНаименованию(ИмяГруппыДоступа);
		
		Если НайденнаяГруппа.Пустая() Тогда
			ВызватьИсключение "Ошибка при создании пользователя: Не найдена группа доступа <" + ИмяГруппыДоступа + ">!";
		КонецЕсли;
		
		МассивГрупп.Добавить(НайденнаяГруппа);
		
	КонецЦикла;
	
	Возврат МассивГрупп;
	
КонецФункции

&НаСервереБезКонтекста
Функция НайтиПользователяПоИмени(Знач ИмяПользователя)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Наименование", ИмяПользователя);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Пользователи.Ссылка
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.Наименование = &Наименование";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция НетАдминистраторовВБазе()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ГруппыДоступаПользователи.Пользователь
		|ИЗ
		|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
		|ГДЕ
		|	ГруппыДоступаПользователи.Ссылка = ЗНАЧЕНИЕ(Справочник.ГруппыДоступа.Администраторы)";
		
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции

//окончание текста модуля